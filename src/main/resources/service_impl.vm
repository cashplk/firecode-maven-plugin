package ${base}#if("${module}"!="").${module}#end.service.impl;

import ${base}#if("${module}"!="").${module}#end.manager.${clazzName}Manager;
import ${base}#if("${module}"!="").${module}#end.service.${clazzName}Service;

import ${base}#if("${module}"!="").${module}#end.model.param.Create${clazzName}Param;;
import ${base}#if("${module}"!="").${module}#end.model.param.Update${clazzName}Param;
import ${base}#if("${module}"!="").${module}#end.model.query.${clazzName}Query;
import ${base}#if("${module}"!="").${module}#end.model.dto.${clazzName}DTO;
import ${base}#if("${module}"!="").${module}#end.model.PlainResult;
import ${base}#if("${module}"!="").${module}#end.model.ListResult;
import ${base}#if("${module}"!="").${module}#end.model.ResultUtils;
import ${base}#if("${module}"!="").${module}#end.utils.${clazzName}TransUtils;

import org.springframework.stereotype.Service;

import java.util.List;

import javax.annotation.Resource;
import javax.validation.groups.Default;

import lombok.extern.slf4j.Slf4j;


/**
* Created by ${author}
* Time ${time}
* Desc
*/
@Service
@Slf4j
public class ${clazzName}ServiceImpl implements ${clazzName}Service {

@Resource
private ${clazzName}Manager ${javaName}Manager;

@Override
public PlainResult
<Long> create${clazzName}(Create${clazzName}Param create${clazzName}Param) {
    Long id = ${javaName}Manager.create${clazzName}(${javaName}CreateParam);
    return ResultUtils.plainResult(id);
    }

    @Override
    public PlainResult
    <${clazzName}DTO> get${clazzName}(${clazzName}Query ${javaName}Query) {
        //todo param validate
        ${clazzName}DTO ${javaName}DTO = ${javaName}Manager.get${clazzName}(${javaName}Query);
        return ResultUtils.plainResult(${javaName}DTO);
        }

        @Override
        public ListResult
        <${clazzName}DTO> list(${clazzName}Query ${javaName}Query) {
            int count = ${javaName}Manager.count${clazzName}(${javaName}SearchQuery);
            if(count > 0) {
            List
            <${clazzName}DTO> list = ${javaName}Manager.list(${javaName}Query);
                return ResultUtils.pageResult(${javaName}Query.getPage(), ${javaName}Query.getPageSize(), count, list);
                } else {
                return ResultUtils.pageEmptyResult(${javaName}Query.getPage(), ${javaName}Query.getPageSize());
                }
                }


                @Override
                public PlainResult
                <Integer> update${clazzName}(Update${clazzName}Param update${clazzName}Param) {
                    //todo param validate
                    ${clazzName}Query ${javaName}Query = new ${clazzName}Query();
                    #foreach($entry in $columnMap.entrySet())
                        #set($column=$entry.value)
                        #if($column.index && "${column.columnName}"!="id")
                            ${javaName}Query.set${column.clazzName}(update${clazzName}Param.get${column.clazzName}());
                        #end
                    #end
                    ${clazzName}DTO ${javaName}DTO = ${javaName}Manager.get${clazzName}(${javaName}GetQuery);
                    if (${javaName}DTO == null) {
                    return ResultUtils.plainFailResult(MeiCode.DATA_NOT_FOUND);
                    }else {
                    int update = ${javaName}Manager.update${clazzName}(${javaName}UpdateParam);
                    return ResultUtils.plainResult(update);
                    }
                    }
                    }